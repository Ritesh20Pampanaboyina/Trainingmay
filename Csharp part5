Covariance and Contravariance in Delegates
Explanation:

Covariance: Allows a method to have a return type that is more derived than that defined by the delegate.
Contravariance: Allows a method to accept parameter types that are less derived than those defined by the delegate.
Example:
class Animal { }
class Dog : Animal { }

delegate Animal AnimalHandler(Dog dog);

class Program
{
    static void Main(string[] args)
    {
        AnimalHandler handler = HandleAnimal;
        handler += HandleDog;

        Animal animal = handler(new Dog());
    }

    static Animal HandleAnimal(Animal animal)
    {
        Console.WriteLine("Handling an animal");
        return animal;
    }

    static Dog HandleDog(Dog dog)
    {
        Console.WriteLine("Handling a dog");
        return dog;
    }
}
Handling an animal
Handling a dog

Generic Delegates
Explanation: Generic delegates allow you to define a delegate with a placeholder for the data type, providing more flexibility and reusability.

Example:
Func<int, int, int> add = (a, b) => a + b;
Console.WriteLine("Sum: " + add(5, 10));
Sum: 15

Defining and Using Events
Explanation: Events are special delegates that provide a way for a class to notify other classes or objects when something of interest occurs.

Example:
class Button
{
    public event Action Click;

    public void SimulateClick()
    {
        Click?.Invoke();
    }
}

class Program
{
    static void Main(string[] args)
    {
        Button button = new Button();
        button.Click += () => Console.WriteLine("Button clicked!");

        button.SimulateClick();
    }
}
Button clicked!

Module 20: Creating Windows Applications
Concepts Covered:

Creating a Windows Form
Windows Form Controls
Writing Code for Control Events
Understanding Delegates and Events Implemented in Windows Forms
Writing a Common Method Called for Click Event of Multiple Buttons
Creating a Windows Form
Explanation: Windows Forms (WinForms) is a UI framework for building Windows desktop applications. It provides a variety of controls like buttons, labels, textboxes, etc.
Example: To create a simple Windows Form, you would typically start by using Visual Studio to create a new Windows Forms App. The following is a simple example of a form with a button that shows a message when clicked.

Code Example:
using System;
using System.Windows.Forms;

namespace WindowsFormsApp
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            MessageBox.Show("Button clicked!");
        }
    }
}

Explanation:

InitializeComponent(): This method is called within the form's constructor to initialize the UI components.
button1_Click: This is an event handler for the button's click event, which shows a message box when the button is clicked.
Output: When you run this application, you will see a form with a button. Clicking the button will display a message box with "Button clicked!".
Writing a Common Method Called for Click Event of Multiple Buttons
Explanation: You can write a single method to handle the click event for multiple buttons, and use the sender parameter to determine which button was clicked.

Example:
using System;
using System.Windows.Forms;

namespace WindowsFormsApp
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
            button1.Click += new EventHandler(Buttons_Click);
            button2.Click += new EventHandler(Buttons_Click);
        }

        private void Buttons_Click(object sender, EventArgs e)
        {
            Button clickedButton = sender as Button;
            MessageBox.Show(clickedButton.Text + " clicked!");
        }
    }
}
Explanation:

Buttons_Click: This method handles the click event for multiple buttons. The sender parameter is cast to a Button to identify which button was clicked.
Output: When you run this application, clicking either button1 or button2 will display a message box indicating which button was clicked.


Module 21: Destroying Objects and Resource Management in C#
Concepts Covered:

Objects and Memory
Using Destructors
Destroying Objects
Programming for the Garbage Collector
Implementing the IDisposable Interface
Understanding and Implementing Object Pooling
Cloning Objects, Implementing Shallow and Deep Copies
Objects and Memory
Explanation: In C#, memory management is largely handled by the .NET runtime's garbage collector (GC). The GC automatically allocates and releases memory for objects, helping to manage memory efficiently. However, developers can also control memory management in certain scenarios.

Using Destructors
Explanation: A destructor is a method that is called when an object is about to be destroyed. In C#, destructors are used to clean up unmanaged resources. Destructors are not as commonly used as they are in languages like C++, because .NET provides automatic garbage collection.

Example:
class Resource
{
    // Destructor
    ~Resource()
    {
        Console.WriteLine("Destructor called, releasing resources.");
    }
}

class Program
{
    static void Main(string[] args)
    {
        Resource res = new Resource();
    }
}
Output: The destructor will be called when the object is no longer accessible and the garbage collector decides to collect it. The output may not be immediate, as the GC runs asynchronously.
Destructor called, releasing resources.

Destroying Objects
Explanation: Objects are destroyed automatically by the garbage collector when they are no longer in use. Explicitly calling the destructor or GC.Collect() is generally not recommended.

Example:
class Program
{
    static void Main(string[] args)
    {
        Resource res = new Resource();
        // Resource object will be destroyed by the GC when it is no longer needed.
    }
}
Programming for the Garbage Collector
Explanation: While the garbage collector automatically manages memory, there are certain best practices to follow:

Avoid unnecessary object creation: This reduces the workload of the garbage collector.
Dispose of unmanaged resources: Use the IDisposable interface to release unmanaged resources promptly.
Example:
class Resource : IDisposable
{
    public void Dispose()
    {
        Console.WriteLine("Dispose called, releasing resources.");
    }
}

class Program
{
    static void Main(string[] args)
    {
        using (Resource res = new Resource())
        {
            // Use the resource
        }  // Dispose is called automatically at the end of the using block
    }
}
Dispose called, releasing resources.

Implementing the IDisposable Interface
Explanation: The IDisposable interface provides a mechanism for releasing unmanaged resources. Implementing this interface allows the use of the using statement, which ensures that resources are released as soon as they are no longer needed.

Example:
class Resource : IDisposable
{
    public void Dispose()
    {
        Console.WriteLine("Dispose called, releasing resources.");
    }
}

class Program
{
    static void Main(string[] args)
    {
        using (Resource res = new Resource())
        {
            // Use the resource
        }
    }
}
Dispose called, releasing resources.
Understanding and Implementing Object Pooling
Explanation: Object pooling is a performance optimization technique that involves reusing objects instead of creating and destroying them repeatedly. This can be especially useful for objects that are expensive to create or destroy.

Example of Shallow and Deep Copy:
class Person
{
    public string Name;
    public Address Address;

    // Shallow copy
    public Person ShallowCopy()
    {
        return (Person)this.MemberwiseClone();
    }

    // Deep copy
    public Person DeepCopy()
    {
        Person clone = (Person)this.MemberwiseClone();
        clone.Address = new Address { City = this.Address.City };
        return clone;
    }
}

class Address
{
    public string City;
}

class Program
{
    static void Main(string[] args)
    {
        Person person1 = new Person { Name = "Alice", Address = new Address { City = "New York" } };
        Person person2 = person1.ShallowCopy();
        Person person3 = person1.DeepCopy();

        // Modify the address of the original person
        person1.Address.City = "Los Angeles";

        Console.WriteLine("Person 2 City (Shallow Copy): " + person2.Address.City);  // Los Angeles (same reference)
        Console.WriteLine("Person 3 City (Deep Copy): " + person3.Address.City);  // New York (new reference)
    }
}
Person 2 City (Shallow Copy): Los Angeles
Person 3 City (Deep Copy): New York



Module 22: File Handling
Concepts Covered:

FileSystemInfo Base Class, FileInfo Class, and Their Members
Streams
Reader/Writer
Basic File IO
FileSystemInfo Base Class, FileInfo Class, and Their Members
Explanation: The FileSystemInfo class provides the base functionality for file and directory information objects, such as FileInfo and DirectoryInfo.

Example:
using System;
using System.IO;

class Program
{
    static void Main(string[] args)
    {
        FileInfo fileInfo = new FileInfo("example.txt");
        Console.WriteLine("File Name: " + fileInfo.Name);
        Console.WriteLine("Full Path: " + fileInfo.FullName);
        Console.WriteLine("File Size: " + fileInfo.Length + " bytes");
    }
}
File Name: example.txt
Full Path: [path to example.txt]
File Size: [file size in bytes]

Streams
Explanation: Streams are used to read from and write to data sources such as files, memory, and network connections. Common stream classes include FileStream, MemoryStream, BufferedStream, etc.

Example:
using System;
using System.IO;

class Program
{
    static void Main(string[] args)
    {
        string filePath = "example.txt";

        // Writing to a file using FileStream
        using (FileStream fs = new FileStream(filePath, FileMode.Create))
        {
            byte[] info = new System.Text.UTF8Encoding(true).GetBytes("Hello, World!");
            fs.Write(info, 0, info.Length);
        }

        // Reading from a file using FileStream
        using (FileStream fs = new FileStream(filePath, FileMode.Open))
        {
            byte[] b = new byte[1024];
            UTF8Encoding temp = new UTF8Encoding(true);

            while (fs.Read(b, 0, b.Length) > 0)
            {
                Console.WriteLine(temp.GetString(b));
            }
        }
    }
}
Hello, World!

Reader/Writer
Explanation: StreamReader and StreamWriter are used for reading and writing text data, respectively.

Example:
using System;
using System.IO;

class Program
{
    static void Main(string[] args)
    {
        string filePath = "example.txt";

        // Writing to a file using StreamWriter
        using (StreamWriter writer = new StreamWriter(filePath))
        {
            writer.WriteLine("Hello, World!");
        }

        // Reading from a file using StreamReader
        using (StreamReader reader = new StreamReader(filePath))
        {
            string line;
            while ((line = reader.ReadLine()) != null)
            {
                Console.WriteLine(line);
            }
        }
    }
}
Hello, World!

Basic File IO
Explanation: The File class provides static methods for creating, copying, deleting, moving, and opening files.

Example:
using System;
using System.IO;

class Program
{
    static void Main(string[] args)
    {
        string filePath = "example.txt";

        // Create a new file
        if (!File.Exists(filePath))
        {
            File.WriteAllText(filePath, "Hello, World!");
        }

        // Read the file
        string content = File.ReadAllText(filePath);
        Console.WriteLine("File Content: " + content);

        // Delete the file
        File.Delete(filePath);
        Console.WriteLine("File deleted.");
    }
}
File Content: Hello, World!
File deleted.

Module 23: Serialization
Concepts Covered:

Serialization Scenarios
Serialization Attributes
Object Graph
Serialization Process
Serialization Example
Deserialization Example
Serialization Scenarios
Explanation: Serialization is the process of converting an object into a format that can be stored or transmitted and then reconstructed later. Common scenarios include saving an object to a file or sending an object over a network.
Serialization Attributes
Explanation: Serialization attributes like [Serializable] and [NonSerialized] control how the object is serialized.

Example:
using System;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;

[Serializable]
class Person
{
    public string Name { get; set; }
    public int Age { get; set; }

    [NonSerialized]
    private string password;

    public Person(string name, int age, string password)
    {
        Name = name;
        Age = age;
        this.password = password;
    }

    public override string ToString()
    {
        return $"{Name}, {Age} years old";
    }
}

class Program
{
    static void Main(string[] args)
    {
        Person person = new Person("Alice", 30, "secret123");

        // Serialize the object
        BinaryFormatter formatter = new BinaryFormatter();
        using (FileStream fs = new FileStream("person.dat", FileMode.Create))
        {
            formatter.Serialize(fs, person);
        }

        // Deserialize the object
        using (FileStream fs = new FileStream("person.dat", FileMode.Open))
        {
            Person deserializedPerson = (Person)formatter.Deserialize(fs);
            Console.WriteLine(deserializedPerson);
        }
    }
}
Alice, 30 years old

Object Graph
Explanation: An object graph is a network of interconnected objects. During serialization, the entire object graph is serialized, meaning that all objects referenced by the main object are also serialized.

Serialization Process
Explanation: Serialization involves converting an object into a byte stream for storage or transmission, while deserialization reconstructs the object from the byte stream.
Serialization Example
Explanation: The example provided in the Serialization Attributes section demonstrates how to serialize and deserialize an object using binary serialization.

Deserialization Example
Explanation: Deserialization is the process of converting a byte stream back into an object. The example provided above demonstrates deserialization after serialization.












