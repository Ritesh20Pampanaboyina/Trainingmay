Module 5: C# Language Fundamentals
Structure of a C# Program
Code Example:
using System;

namespace HelloWorld
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello, World!");
        }
    }
}
Hello, World!

Basic Input/Output Operations
Code Example:
using System;

namespace InputOutputExample
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Enter your name:");
            string name = Console.ReadLine();
            Console.WriteLine("Hello, " + name + "!");
        }
    }
}
Enter your name:
[User inputs "Alice"]
Hello, Alice!

Commenting a Program
Code Example:
using System;

namespace CommentExample
{
    class Program
    {
        static void Main(string[] args)
        {
            // This is a single-line comment
            Console.WriteLine("Hello, World!");

            /* This is a 
               multi-line comment */
            Console.WriteLine("This is another line.");
        }
    }
}
Hello, World!
This is another line.

Module 6: Using Value-Type Variables in C#
Naming Variables
Code Example:
int studentAge = 21;
string studentName = "John Doe";
Console.WriteLine("Student Name: " + studentName + ", Age: " + studentAge);

Student Name: John Doe, Age: 21

Using Built-In Data Types
Code Example:
int number = 5;
double price = 19.99;
char grade = 'A';
bool isPassed = true;

Console.WriteLine("Number: " + number);
Console.WriteLine("Price: " + price);
Console.WriteLine("Grade: " + grade);
Console.WriteLine("Passed: " + isPassed);
Number: 5
Price: 19.99
Grade: A
Passed: True

Creating User-Defined Data Types
Code Example:
enum Days { Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday };

struct Student
{
    public string Name;
    public int Age;
}

class Program
{
    static void Main(string[] args)
    {
        Student student;
        student.Name = "Alice";
        student.Age = 20;

        Console.WriteLine("Student Name: " + student.Name + ", Age: " + student.Age);
    }
}
Student Name: Alice, Age: 20

Converting Data Types
Code Example:
int num = 10;
double d = num;  // Implicit conversion

double pi = 3.14;
int rounded = (int)pi;  // Explicit conversion

Console.WriteLine("Double to Int (Explicit): " + rounded);
Console.WriteLine("Int to Double (Implicit): " + d);

Double to Int (Explicit): 3
Int to Double (Implicit): 10

Typecasting
Code Example:
double d = 9.78;
int i = (int)d;  // Explicit casting

Console.WriteLine("Casted value: " + i);

Casted value: 9

Boxing and Un-boxing Data Types
Code Example:
int num = 123;  // Value type
object obj = num;  // Boxing

int unboxedNum = (int)obj;  // Un-boxing

Console.WriteLine("Boxed value: " + obj);
Console.WriteLine("Unboxed value: " + unboxedNum);
Boxed value: 123
Unboxed value: 123

Module 7: C# Statements
Using Selection Statements
If-Else Example:
int age = 20;

if (age < 18)
{
    Console.WriteLine("You are a minor.");
}
else if (age >= 18 && age < 60)
{
    Console.WriteLine("You are an adult.");
}
else
{
    Console.WriteLine("You are a senior citizen.");
}
You are an adult.

Switch Statement Example:
int day = 3;

switch (day)
{
    case 1:
        Console.WriteLine("Monday");
        break;
    case 2:
        Console.WriteLine("Tuesday");
        break;
    case 3:
        Console.WriteLine("Wednesday");
        break;
    default:
        Console.WriteLine("Other day");
        break;
}
Wednesday

Using Iteration Statements
For Loop Example:
1
2
3
4
5

While Loop Example:
int i = 1;
while (i <= 5)
{
    Console.WriteLine(i);
    i++;
}
1
2
3
4
5

Foreach Loop Example:
string[] cars = { "Ford", "Toyota", "Honda" };
foreach (string car in cars)
{
    Console.WriteLine(car);
}
Ford
Toyota
Honda

Using Jump Statements
Break Statement Example:
for (int i = 1; i <= 10; i++)
{
    if (i == 5)
    {
        break;  // Exits the loop
    }
    Console.WriteLine(i);
}
1
2
3
4

Continue Statement Example:
for (int i = 1; i <= 5; i++)
{
    if (i == 3)
    {
        continue;  // Skips the rest of the loop body for this iteration
    }
    Console.WriteLine(i);
}
1
2
4
5

Using Conditional Statements
Conditional (Ternary) Operator Example:
int number = 10;
string result = (number % 2 == 0) ? "Even" : "Odd";
Console.WriteLine(result);

Even

Module 8: Essentials of Object-Oriented Programming in C#
Understanding Namespaces
Code Example:
using System;
namespace MyApp
{
    class MyClass
    {
        public void DisplayMessage()
        {
            Console.WriteLine("Hello, World!");
        }
    }
}

class Program
{
    static void Main(string[] args)
    {
        MyApp.MyClass obj = new MyApp.MyClass();
        obj.DisplayMessage();
    }
}
Hello, World!

Defining Classes
Code Example:
class Car
{
    public string Make;
    public string Model;
    public int Year;

    public void DisplayInfo()
    {
        Console.WriteLine($"Make: {Make}, Model: {Model}, Year: {Year}");
    }
}

class Program
{
    static void Main(string[] args)
    {
        Car myCar = new Car();
        myCar.Make = "Ford";
        myCar.Model = "Mustang";
        myCar.Year = 2022;

        myCar.DisplayInfo();
    }
}
Make: Ford, Model: Mustang, Year: 2022

Difference Between Abstraction and Encapsulation
Example of Abstraction:
public abstract class Animal
{
    public abstract void MakeSound();
}

public class Dog : Animal
{
    public override void MakeSound()
    {
        Console.WriteLine("Bark!");
    }
}

class Program
{
    static void Main(string[] args)
    {
        Dog dog = new Dog();
        dog.MakeSound();
    }
}
Bark!

Example of Encapsulation:
class BankAccount
{
    private double balance;

    public void Deposit(double amount)
    {
        balance += amount;
    }

    public double GetBalance()
    {
        return balance;
    }
}

class Program
{
    static void Main(string[] args)
    {
        BankAccount account = new BankAccount();
        account.Deposit(100.50);
        Console.WriteLine("Balance: " + account.GetBalance());
    }
}

Balance: 100.5

Defining Object-Oriented Systems
Code Example:
class Employee
{
    private string name;
    private int id;

    public Employee(string name, int id)
    {
        this.name = name;
        this.id = id;
    }

    public void DisplayInfo()
    {
        Console.WriteLine($"Employee Name: {name}, ID: {id}");
    }
}

class Program
{
    static void Main(string[] args)
    {
        Employee emp = new Employee("Alice", 101);
        emp.DisplayInfo();
    }
}
Employee Name: Alice, ID: 101

Module 9: String and Arrays in C#
String Handling
Code Example with String:
string greeting = "Hello";
string name = "Alice";
string fullGreeting = greeting + ", " + name + "!";
Console.WriteLine(fullGreeting);
Hello, Alice!

Code Example with StringBuilder:
using System.Text;

StringBuilder sb = new StringBuilder();
sb.Append("Hello");
sb.Append(", ");
sb.Append("Alice!");
Console.WriteLine(sb.ToString());
Hello, Alice!

Arrays
Single Dimension Array Example:
int[] numbers = { 1, 2, 3, 4, 5 };
Console.WriteLine("First element: " + numbers[0]);

First element: 1

Multi-Dimension Array Example:
int[,] multiDimension = new int[2, 3] 
{ 
    { 1, 2, 3 }, 
    { 4, 5, 6 } 
};
Console.WriteLine("Element at [1,2]: " + multiDimension[1, 2]);
Element at [1,2]: 6

Jagged Arrays
Code Example:
int[][] jaggedArray = new int[2][];
jaggedArray[0] = new int[] { 1, 2, 3 };
jaggedArray[1] = new int[] { 4, 5 };

Console.WriteLine("Element at jaggedArray[0][2]: " + jaggedArray[0][2]);
Element at jaggedArray[0][2]: 3

Using foreach Loop
Code Example:
string[] names = { "Alice", "Bob", "Charlie" };

foreach (string name in names)
{
    Console.WriteLine(name);
}
Alice
Bob
Charlie

























